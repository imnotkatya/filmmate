import { useEffect, useState } from "react";
import "/Users/ekaterina/Desktop/filmmate/filmmate/src/Theater.css";

function Theater() {
  const [name, setName] = useState("");
  const [theater_id, setTheaterId] = useState("");
  const [location, setLocation] = useState("");
  const [theaters, setTheaters] = useState([]);
  const [new_location, setNewLocation] = useState("");
  const [new_name, setNewName] = useState("");

  // üîÅ –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ç–µ–∞—Ç—Ä–æ–≤
  const fetchTheaters = async () => {
    try {
      const response = await fetch("http://localhost:5000/api/theaters");
      const data = await response.json();
      setTheaters(data.theaters);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞:", error);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    fetchTheaters();
  }, []);

  const handleFillInputs = (theater) => {
    setName(theater.name);
    setLocation(theater.location);
    setTheaterId(theater.theater_id);
  };

  const handleSaveChange = async () => {
    const dataToSave = {
      name,
      location,
    };

    try {
      const response = await fetch(`http://localhost:5000/api/theaters/${parseInt(theater_id)}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(dataToSave),
      });

      if (response.ok) {
        await fetchTheaters(); // üîÅ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        alert("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
      } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
    }
  };

  const handleDelete = async () => {
    try {
      const response = await fetch(
        `http://localhost:5000/api/theaters/delete_theater/${parseInt(theater_id)}`,
        {
          method: "DELETE",
        }
      );
      if (response.ok) {
        await fetchTheaters(); // üîÅ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        setName("");
        setLocation("");
        setTheaterId("");
        alert("–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä —É–¥–∞–ª–µ–Ω!");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞.");
    }
  };

  const handleCinemaAdd = async () => {
    if (!new_name || !new_location) {
      alert("–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –º–µ—Å—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.");
      return;
    }

    const theater_data = { name: new_name, location: new_location };

    try {
      const response = await fetch("http://localhost:5000/api/add_theater", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(theater_data),
      });

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      alert(`–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä "${data.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
      await fetchTheaters(); // üîÅ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      setNewName("");
      setNewLocation("");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞:", error);
      alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞.");
    }
  };

  return (
    <>
      <h1>–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã</h1>
      <table>
        <thead>
          <tr>
            <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
            <th>–õ–æ–∫–∞—Ü–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {theaters.map((theater) => (
            <tr key={theater.theater_id} onClick={() => handleFillInputs(theater)}>
              <td>{theater.name}</td>
              <td>{theater.location}</td>
            </tr>
          ))}
        </tbody>
      </table>
<div className="crud">

<div className="one">
      <h1>–ò–∑–º–µ–Ω–µ–Ω–∏–µ / –£–¥–∞–ª–µ–Ω–∏–µ</h1>
      <h2>–ù–∞–∑–≤–∞–Ω–∏–µ</h2>
      <input value={name || ""} onChange={(e) => setName(e.target.value)} />
      <h2>–õ–æ–∫–∞—Ü–∏—è</h2>
      <input value={location || ""} onChange={(e) => setLocation(e.target.value)} />
      <br />
      <button onClick={handleSaveChange}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
      <button onClick={handleDelete}>–£–¥–∞–ª–∏—Ç—å</button>
      </div>
      <div className="two">
      <h1>–î–æ–±–∞–≤–∏—Ç—å –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä</h1>
      <h2>–ù–∞–∑–≤–∞–Ω–∏–µ</h2>
      <input value={new_name || ""} onChange={(e) => setNewName(e.target.value)} />
      <h2>–õ–æ–∫–∞—Ü–∏—è</h2>
      <input value={new_location || ""} onChange={(e) => setNewLocation(e.target.value)} />
      <br />
      <button onClick={handleCinemaAdd}>–î–æ–±–∞–≤–∏—Ç—å</button>
      </div>


      </div>
    </>
  );
}

export default Theater;
