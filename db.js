const express = require("express");
const { Sequelize, DataTypes } = require("sequelize");
const cors = require("cors");
const bcrypt = require("bcrypt");
const nodemailer = require('nodemailer');
const bodyParser = require('body-parser');
const stripe = require("stripe")("sk_test_51RCNozFtMlrzCs5Y60kxjDHo5RCF8bh0yjVIyx347BnGQNEQOCpXnnM7euO78XvtxcRETgAgYkUcD0WERWO007cO00Iza3lZDG");

const app = express();
const port = 5000;
app.use(cors());
app.use(express.json());
app.use(bodyParser.json());
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
const sequelize = new Sequelize("filmate", "postgres", "123", {
  host: "localhost",
  dialect: "postgres",
  port: 5433,
});


app.post('/api/send-email', async (req, res) => {
  const { email, subject, text } = req.body;

  try {
    const transporter = nodemailer.createTransport({
      host: "smtp.mail.ru",
      port: 465,
      secure: true, // true –¥–ª—è 465, false –¥–ª—è 587
      auth: {
        user: "beauty.cutie@mail.ru",
        pass: "sJgbLA6PS9s0stbwZd8m",
      },
    });

    await transporter.sendMail({
      from: '"–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä" <beauty.cutie@mail.ru>', // –ò–º—è –∏ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      to: email, // –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
      subject: subject,
      text: text,
    });

    res.status(200).json({ message: "–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞" });
  }
});


app.post("/api/create-payment-intent", async (req, res) => {
  try {
    const { amount } = req.body;
    console.log("Amount received:", amount);

    const paymentIntent = await stripe.paymentIntents.create({
      amount,
      currency: "usd",
    });

    res.status(200).send({
      clientSecret: paymentIntent.client_secret,
    });


    
  } catch (error) {
    console.error("Error creating payment intent:", error);
    res.status(500).send({ error: error.message });
  }
});



// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
const Movie = sequelize.define("Movie", {
  movie_id: { type: DataTypes.INTEGER, primaryKey: true },
  title: { type: DataTypes.STRING },
  genre: { type: DataTypes.STRING },
  rating: { type: DataTypes.DECIMAL(3, 2) },
  duration: { type: DataTypes.INTEGER },
}, {
  tableName: "movies",
  timestamps: false,
});

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
const Playlist = sequelize.define("Playlist", {
  playlist_id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  name: { type: DataTypes.STRING, allowNull: false },
  user_id: { type: DataTypes.INTEGER, allowNull: false },
}, {
  tableName: "playlists",
  timestamps: false,
});

const Playlist_Movies = sequelize.define("Playlist_movies", {
  playlist_id: { 
    type: DataTypes.INTEGER, 
    primaryKey: true 
  },
  movie_id: { 
    type: DataTypes.INTEGER, 
    primaryKey: true 
  },
}, {
  tableName: "playlist_movies",
  timestamps: false,
});


const Theater = sequelize.define("Theater", {
  theater_id: { type: DataTypes.INTEGER, primaryKey: true,autoIncrement: true  },
  name: { type: DataTypes.STRING },
  location: { type: DataTypes.STRING },
}, {
  tableName: "theaters",
  timestamps: false,
});

const PurchasedTicket = sequelize.define("PurchasedTicket", {
  purchased_ticket_id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  ticket_id: { type: DataTypes.INTEGER, allowNull: false },
  user_email: { type: DataTypes.STRING, allowNull: false },  // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ STRING –¥–ª—è email
  purchase_time: { type: DataTypes.DATE, defaultValue: Sequelize.NOW },
}, {
  tableName: "purchasedtickets",
  timestamps: false,
});

const Session = sequelize.define("Session", {
  session_id: { type: DataTypes.INTEGER, primaryKey: true },
  movie_id: { type: DataTypes.INTEGER },
  theater_id: { type: DataTypes.INTEGER },
  session_date: { type: DataTypes.DATE },
  start_time: { type: DataTypes.TIME },
  end_time: { type: DataTypes.TIME },
  price: { type: DataTypes.DECIMAL(5, 2) },
}, {
  tableName: "sessions",
  timestamps: false,
});

// –ú–æ–¥–µ–ª—å Seat
const Seat = sequelize.define("Seat", {
  seat_id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  session_id: { type: DataTypes.INTEGER, allowNull: false },
  seat_number: { type: DataTypes.INTEGER, allowNull: false },
  is_available: { type: DataTypes.BOOLEAN, defaultValue: true },
}, {
  tableName: "seats",
  timestamps: false,
});

// –ú–æ–¥–µ–ª—å User
const User = sequelize.define("User", {
  user_id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  username: { type: DataTypes.STRING, allowNull: false },
  email: { type: DataTypes.STRING, allowNull: false, unique: true },
  password_hash: { type: DataTypes.STRING, allowNull: false },
  role: { type: DataTypes.STRING },
}, {
  tableName: "users",
  timestamps: false,
});
// –ú–æ–¥–µ–ª—å Ticket
const Ticket = sequelize.define("Ticket", {
  ticket_id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  user_id: { type: DataTypes.INTEGER, allowNull: false },
  session_id: { type: DataTypes.INTEGER, allowNull: false },
  seat_number: { type: DataTypes.INTEGER, allowNull: false },
  purchase_time: { type: DataTypes.DATE, defaultValue: Sequelize.NOW },
  price: { type: DataTypes.DECIMAL(5, 2) },
}, {
  tableName: "tickets",
  timestamps: false,
});

Playlist.hasMany(Playlist_Movies, { foreignKey: "playlist_id" });
Movie.hasMany(Playlist_Movies, { foreignKey: "movie_id" });

Playlist_Movies.belongsTo(Playlist, { foreignKey: "playlist_id" });
Playlist_Movies.belongsTo(Movie, { foreignKey: "movie_id" });


// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π
Movie.hasMany(Session, { foreignKey: "movie_id" });
Session.belongsTo(Movie, { foreignKey: "movie_id" });

Theater.hasMany(Session, { foreignKey: "theater_id" });
Session.belongsTo(Theater, { foreignKey: "theater_id" });

Session.hasMany(Seat, { foreignKey: "session_id" });
Seat.belongsTo(Session, { foreignKey: "session_id" });

User.hasMany(Ticket, { foreignKey: "user_id" });
Ticket.belongsTo(User, { foreignKey: "user_id" });

Session.hasMany(Ticket, { foreignKey: "session_id" });
Ticket.belongsTo(Session, { foreignKey: "session_id" });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
sequelize.authenticate()
  .then(() => console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ"))
  .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err));

app.use(cors());
app.use(express.json());

// API: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
app.get("/api/all-tables", async (req, res) => {
  try {
    const movies = await Movie.findAll();
    const sessions = await Session.findAll();
    const theaters = await Theater.findAll();
    const seats = await Seat.findAll();
    res.json({ movies, sessions, theaters, seats });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö" });
  }
});

app.get("/api/theaters", async (req, res) => {
  try {
   
    const theaters = await Theater.findAll();
   
    res.json({  theaters });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö" });
  }
});
// API: –ü–æ–ª—É—á–∏—Ç—å —Å–µ–∞–Ω—Å—ã –ø–æ —Ñ–∏–ª—å–º—É
app.get("/api/sessions/:movieId", async (req, res) => {
  const movieId = Number(req.params.movieId);
  console.log(`üîç –ó–∞–ø—Ä–æ—Å —Å–µ–∞–Ω—Å–æ–≤ –¥–ª—è movieId = ${movieId}`);

  if (isNaN(movieId)) {
    return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π movieId" });
  }

  try {
    const sessions = await Session.findAll({
      where: { movie_id: movieId },
      include: [{ model: Theater, attributes: ["name", "location"] }],
    });

    if (sessions.length === 0) {
      return res.status(404).json({ message: "–°–µ–∞–Ω—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
    }

    res.json(sessions);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–µ–∞–Ω—Å–æ–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–µ–∞–Ω—Å–æ–≤" });
  }
});
app.get("/api/playlists/:user_id", async (req, res) => {
  try {
    const { user_id } = req.params;
    if (!user_id) {
      return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω user_id" });
    }

    const playlists = await Playlist.findAll({ where: { user_id } });

    res.json(playlists);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// API: –ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è —Å–µ–∞–Ω—Å–∞
app.get("/api/seats/:sessionId", async (req, res) => {
  const sessionId = Number(req.params.sessionId);
  console.log(`üéü –ó–∞–ø—Ä–æ—Å –º–µ—Å—Ç –¥–ª—è sessionId = ${sessionId}`);

  if (isNaN(sessionId)) {
    return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π sessionId" });
  }

  try {
    const seats = await Seat.findAll({ where: { session_id: sessionId } });

    if (seats.length === 0) {
      return res.status(404).json({ message: "–ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
    }

    res.json(seats);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –º–µ—Å—Ç:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –º–µ—Å—Ç" });
  }
});

// API: –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç
app.post("/api/purchase", async (req, res) => {
  const { session_id, seat_number, user_id, purchase_time, price, email } = req.body;

  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–∫—É–ø–∫–µ
    const purchase = await Ticket.create({
      session_id,
      seat_number,
      user_id,
      purchase_time,
      price,
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–æ–º –±–∏–ª–µ—Ç–µ
    await PurchasedTicket.create({
      ticket_id: purchase.ticket_id,
      user_email: email,
      purchase_time,
    });

    res.status(200).json({ message: "–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏:", error.message);
    res.status(400).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏" });
  }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/api/update-ticket-status", async (req, res) => {
  const { seats } = req.body;
  try {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await Seat.update(
      { is_available: false },
      {
        where: {
          seat_id: seats,
        },
      }
    );
    res.status(200).json({ message: "–ú–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–∏–ª–µ—Ç–æ–≤:", error.message);
    res.status(400).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–∏–ª–µ—Ç–æ–≤" });
  }
});

app.post("/api/add_theater", async (req, res) => {
  const { location, name } = req.body;
  try {
    const newTheater = await Theater.create({ name, location });
    res.status(201).json({ message: "–¢–µ–∞—Ç—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", theater: newTheater });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∞—Ç—Ä–∞:", error.message);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∞—Ç—Ä–∞", error: error.message });
  }
});
app.post("/api/playlists", async (req, res) => {
  const { user_id, name } = req.body;

  try {

    const playlist = await Playlist.create({ user_id, name });
    res.status(201).json({ message: "–ü–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω", playlist });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞" });
  }
});

app.post("/api/playlist_movies", async (req, res) => {
  const { playlist_id, movie_id,title,rating,duration,genre} = req.body;

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ movies
    let movie = await Movie.findOne({ where: { movie_id } });

    // –ï—Å–ª–∏ —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if (!movie) {
      console.log(`–§–∏–ª—å–º —Å ID ${movie_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º`);

      // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞
      const newMovieData = {
        movie_id,
        title,
        rating,
        duration,
        genre
         // –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ
        // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è, —Ç–∞–∫–∏–µ –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ, –∂–∞–Ω—Ä, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏ —Ç.–¥.
      };

      movie = await Movie.create(newMovieData); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç
    const playlistMovie = await Playlist_Movies.create({ playlist_id, movie_id });
    res.status(201).json({ message: "–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç", playlistMovie });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç" });
  }
});


// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/api/register", async (req, res) => {
  const { email, password, nickname, role } = req.body;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const existingUser = await User.findOne({ where: { email } });
  if (existingUser) {
    return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
  }

  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
    const user = await User.create({
      username: nickname, // –ó–¥–µ—Å—å –Ω–∏–∫–Ω–µ–π–º
      email,
      password_hash: password, // –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
      role: role, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ user_id –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    res.status(201).json({
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
      user_id: user.user_id,  // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ user_id
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" });
  }
});

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/api/login", async (req, res) => {
  const { email, password } = req.body;

  const user = await User.findOne({ where: { email } });
  if (!user) {
    return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω" });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    if (password !== user.password_hash) {
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });
    }

    // –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userProfile = {
      user_id: user.user_id,
      username: user.username,
      email: user.email,
      role: user.role,
    };

    res.status(200).json({ message: "–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω", userProfile });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ" });
  }
});





app.get('/api/profile/:userId', async (req, res) => {
  const userId = Number(req.params.userId);

  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ userId
    const user = await User.findByPk(userId);
    
    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({
      user_id: user.user_id,
      username: user.username,
      email: user.email,
      role: user.role,
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});


// API: –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª—å–º—ã –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –ø–æ ID –ø–ª–µ–π–ª–∏—Å—Ç–∞
app.get("/api/playlist_movies/:userId", async (req, res) => {
  const { userId } = req.params;  // –ü–æ–ª—É—á–∞–µ–º playlist_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞

  try {
    // 1. –ù–∞—Ö–æ–¥–∏–º —Ñ–∏–ª—å–º—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    const playlistMovies = await Playlist_Movies.findAll({
      where: { playlist_id: userId },  // –ò—Å–ø–æ–ª—å–∑—É–µ–º playlist_id –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
      include: [{
        model: Movie,
        attributes: ["movie_id", "title", "genre", "rating", "duration"]
      }]
    });

    if (playlistMovies.length === 0) {
      return res.status(404).json({ message: "–§–∏–ª—å–º—ã –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
    }

    // –ú–∞—Å—Å–∏–≤ —Ñ–∏–ª—å–º–æ–≤
    const movies = playlistMovies.map(pm => pm.Movie);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å–º—ã
    res.json(movies);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–æ–≤" });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è


app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});
